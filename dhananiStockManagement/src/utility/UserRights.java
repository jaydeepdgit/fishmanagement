/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package utility;

import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.StringTokenizer;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.tree.*;
import dhananistockmanagement.DeskFrame;
import support.Constants;
import support.Library;
import support.NavigationPanel;
import support.NavigationPanel1;
import support.SmallNavigation;
import support.VoucherDisplay;

/**
 *
 * @author @JD@
 */
public class UserRights extends javax.swing.JInternalFrame {
    private static Connection dataConnection = DeskFrame.connMpAdmin;
    private static Library lb = new Library();
    DefaultMutableTreeNode root;
    TreePath changePath;
    String Syspath = System.getProperty("user.dir");

    /**
     * Creates new form UserRights
     */
    public UserRights() {
        initComponents();
        lb.registerShortKeys(getRootPane(), jbtnClose, new JButton(""), new JButton(""), jbtnPrint);
        setUserValues();
        jPanel1.setVisible(false);
        setPermission();
        setIconToPnael();
        setTitle(Constants.USER_RIGHTS_FORM_NAME);
    }

    private void setIconToPnael() {
        Syspath += File.separator + "Resources" + File.separator + "Images" + File.separator;
        jbtnPrint.setIcon(new ImageIcon(Syspath +"print.png"));
        jbtnOk.setIcon(new ImageIcon(Syspath +"ok.png"));
        jbtnApply.setIcon(new ImageIcon(Syspath +"apply.png"));
        jbtnClose.setIcon(new ImageIcon(Syspath +"Close.png"));
    }

    private void setPermission(){
        lb.setUserRightsToButton(jbtnPrint, Constants.USER_RIGHTS_FORM_ID, "PRINT");
        boolean flag = UserRights.getRight(Constants.USER_RIGHTS_FORM_ID, "EDIT");
        jbtnApply.setEnabled(flag);
        jbtnOk.setEnabled(flag);
    }

    private void setUserValues() {
        try {
            PreparedStatement pst;
            ResultSet result;
            pst = dataConnection.prepareStatement("SELECT username FROM user_mst", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            result = pst.executeQuery();
            root = new DefaultMutableTreeNode("SYSTEM", true);
            jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
            jTree1.setModel(new DefaultTreeModel(root));
            while (result.next()) {
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(result.getString(1), true);
                root.add(child);
                addFormToUser(child);
            }
            lb.closeResultSet(result);
            lb.closeStatement(pst);
        } catch (Exception ex) {
            lb.printToLogFile("Error at setUserValues In User Rights", ex);
        }
    }

    @Override
    public void dispose() {
        try {
            DeskFrame.removeFromScreen(DeskFrame.tabbedPane.getSelectedIndex());
            super.dispose();
        } catch (Exception ex) {
            lb.printToLogFile("Exception at dispose In User Rights", ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jbtnApply = new javax.swing.JButton();
        jbtnOk = new javax.swing.JButton();
        jbtnPrint = new javax.swing.JButton();
        jbtnClose = new javax.swing.JButton();

        setBackground(new java.awt.Color(211, 226, 245));

        jScrollPane1.setBackground(new java.awt.Color(253, 243, 243));

        jTree1.setBackground(new java.awt.Color(253, 243, 243));
        jTree1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 3, new java.awt.Color(235, 35, 35)));
        jTree1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("System");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jPanel1.setBackground(new java.awt.Color(215, 227, 208));

        jCheckBox1.setBackground(new java.awt.Color(215, 227, 208));
        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox1.setText("VIEW");

        jCheckBox2.setBackground(new java.awt.Color(215, 227, 208));
        jCheckBox2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox2.setText("PRINT");

        jCheckBox3.setBackground(new java.awt.Color(215, 227, 208));
        jCheckBox3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox3.setText("EDIT");

        jCheckBox4.setBackground(new java.awt.Color(215, 227, 208));
        jCheckBox4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox4.setText("ADD");

        jCheckBox5.setBackground(new java.awt.Color(215, 227, 208));
        jCheckBox5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox5.setText("DELETE");

        jCheckBox6.setBackground(new java.awt.Color(215, 227, 208));
        jCheckBox6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox6.setText("NAVIGATION VIEW");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6))
                .addGap(60, 60, 60))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox6)
                .addContainerGap())
        );

        jbtnApply.setBackground(new java.awt.Color(204, 255, 204));
        jbtnApply.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnApply.setForeground(new java.awt.Color(235, 35, 35));
        jbtnApply.setMnemonic('A');
        jbtnApply.setText("APPLY");
        jbtnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnApplyActionPerformed(evt);
            }
        });
        jbtnApply.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jbtnApplyKeyReleased(evt);
            }
        });

        jbtnOk.setBackground(new java.awt.Color(204, 255, 204));
        jbtnOk.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnOk.setForeground(new java.awt.Color(235, 35, 35));
        jbtnOk.setMnemonic('O');
        jbtnOk.setText("OK");
        jbtnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOkActionPerformed(evt);
            }
        });
        jbtnOk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jbtnOkKeyReleased(evt);
            }
        });

        jbtnPrint.setBackground(new java.awt.Color(204, 255, 204));
        jbtnPrint.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnPrint.setForeground(new java.awt.Color(235, 35, 35));
        jbtnPrint.setMnemonic('P');
        jbtnPrint.setText("PRINT");
        jbtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPrintActionPerformed(evt);
            }
        });
        jbtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jbtnPrintKeyReleased(evt);
            }
        });

        jbtnClose.setBackground(new java.awt.Color(204, 255, 204));
        jbtnClose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnClose.setForeground(new java.awt.Color(235, 35, 35));
        jbtnClose.setMnemonic('C');
        jbtnClose.setText("CLOSE");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });
        jbtnClose.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnCloseKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 27, Short.MAX_VALUE)
                        .addComponent(jbtnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtnApply, jbtnOk});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbtnApply)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jbtnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbtnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jbtnClose, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jbtnApply, jbtnClose, jbtnOk, jbtnPrint});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getUserPathCount(String path) {
        StringTokenizer st = new StringTokenizer(path.substring(1, path.length() - 1), ",");
        int i = 0;
        while (st.hasMoreElements()) {
            i++;
            st.nextElement();
        }
        return i;
    }

    private ArrayList getUserArrayPath(TreePath path) {
        String temp;
        ArrayList userPath = new ArrayList();
        StringTokenizer st = new StringTokenizer(path.toString().substring(1, path.toString().length() - 1), ",");

        while (st.hasMoreElements()) {
            temp = (String) st.nextElement();
            userPath.add(temp.trim());
        }
        return userPath;
    }

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        changePath = evt.getPath();
        DefaultMutableTreeNode selectedNode = new DefaultMutableTreeNode(changePath.getLastPathComponent());

        if (getUserPathCount(evt.getPath().toString()) != 0) {
            if (selectedNode.isLeaf()) {
                if (getUserPathCount(evt.getPath().toString()) == 4) {
                    jPanel1.setVisible(true);
                    setPrivileges(evt.getPath());
                } else {
                    jPanel1.setVisible(false);
                }
            } else {
                jPanel1.setVisible(false);
            }
        } else {
            jPanel1.setVisible(false);
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void setPrivilegesValues(boolean b[]) {
        jCheckBox1.setSelected(b[0]);
        jCheckBox2.setSelected(b[1]);
        jCheckBox3.setSelected(b[2]);
        jCheckBox4.setSelected(b[3]);
        jCheckBox5.setSelected(b[4]);
        jCheckBox6.setSelected(b[5]);
    }

    private void printVoucher() {
        VoucherDisplay vd = new VoucherDisplay("", "UR");
        DeskFrame.addOnScreen(vd, Constants.USER_RIGHTS_FORM_NAME +" PRINT");
    }

    private int[] getPrivilegesValues() {
        int[] b = new int[6];
        b[0] = (jCheckBox1.isSelected()) ? 1 : 0;
        b[1] = (jCheckBox2.isSelected()) ? 1 : 0;
        b[2] = (jCheckBox3.isSelected()) ? 1 : 0;
        b[3] = (jCheckBox4.isSelected()) ? 1 : 0;
        b[4] = (jCheckBox5.isSelected()) ? 1 : 0;
        b[5] = (jCheckBox6.isSelected()) ? 1 : 0;
        return b;
    }

    private void setPrivileges(TreePath path) {
        ArrayList userRights = getUserArrayPath(path);

        boolean[] flag = new boolean[6];
        String query = "SELECT u.views, u.print, u.edit, u.adds, u.deletes, u.navigate_view "
                + "FROM form_mst f, user_rights u WHERE u.user_cd = "+ lb.getUserName(userRights.get(1).toString(), "C") +" AND f.form_name = '"+ (String) userRights.get(3) +"' AND (f.form_cd = u.form_cd)";
        if(!DeskFrame.forms.isEmpty()){
            query+=" AND f.form_cd IN ("+ DeskFrame.forms +")";
        }
        try {
            PreparedStatement pst = dataConnection.prepareStatement(query);
            ResultSet result = pst.executeQuery();

            if (result.next()) {
                flag[0] = (result.getInt(1) == 1) ? true : false;
                flag[1] = (result.getInt(2) == 1) ? true : false;
                flag[2] = (result.getInt(3) == 1) ? true : false;
                flag[3] = (result.getInt(4) == 1) ? true : false;
                flag[4] = (result.getInt(5) == 1) ? true : false;
                flag[5] = (result.getInt(6) == 1) ? true : false;
                setPrivilegesValues(flag);
            } else {
            }
            if (result != null) {
                result.close();
            }
            if (pst != null) {
                pst.close();
            }
        } catch (Exception ex) {
            lb.printToLogFile("Error at setPrivileges In User Rights", ex);
        }
    }

    private void applyPrivileges() {
        ArrayList userRights = getUserArrayPath(changePath);
        int[] flag = new int[6];
        flag = getPrivilegesValues();
        String query = "UPDATE user_rights SET views = "+ flag[0] +", edit = "+ flag[2] +", adds = "+ flag[3] +", deletes = "+ flag[4] +", print = "+ flag[1] +", navigate_view = "+ flag[5] +""
            + " WHERE user_cd = "+ lb.getUserName(userRights.get(1).toString(), "C") +" AND"
            + " form_cd = (SELECT form_cd FROM form_mst WHERE form_name = '"+ userRights.get(3).toString() +"')";
        try {
            PreparedStatement pst = dataConnection.prepareStatement(query);
            pst.executeUpdate();

            if (pst != null) {
                pst.close();
            }
        } catch (Exception ex) {
            lb.printToLogFile("Error at applyPrivileges In User Rights", ex);
        }
    }

    public static boolean getRigthsForm(String user_id, String form_id) {
        boolean[] flag = new boolean[6];
        try {
            String query = "SELECT views, edit, adds, deletes, print, navigate_view FROM user_rights WHERE user_cd = "+ user_id +" AND form_cd = "+ form_id;
            PreparedStatement pst = dataConnection.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            if(rs.next()){
                for(int i=0; i < 6; i++) {
                    flag[i] = (rs.getInt(i+1)==1) ? true : false;
                }
            }
            lb.closeResultSet(rs);
            lb.closeStatement(pst);
            return flag[0];
        } catch(Exception ex) {
            lb.printToLogFile("Error to getRigthsForm In User Rights ", ex);
        }
        return flag[0];
    }

    public static boolean getRight(String form_id, String right) {
        boolean flag = false;
        try {
            String query = "SELECT "+ right +" FROM user_rights WHERE user_cd = "+ DeskFrame.user_id +" AND form_cd = "+ form_id;
            PreparedStatement pstLocal = dataConnection.prepareStatement(query);
            ResultSet rsLocal = pstLocal.executeQuery();
            if (rsLocal.next()) {
                if (rsLocal.getInt(1) == 1) {
                    flag = true;
                }
            }
            lb.closeResultSet(rsLocal);
            lb.closeStatement(pstLocal);
        } catch (Exception ex) {
            lb.printToLogFile("Exception at getRight In User Rights", ex);
        }
        return flag;
    }

    public static void setUserRightsToPanel(SmallNavigation navLoad, String FormID) {
        navLoad.setNewEnable(getRight(FormID, "adds"));
        navLoad.setEditEnable(getRight(FormID, "edit"));
        navLoad.setDeleteEnable(getRight(FormID, "deletes"));

        boolean navigate = getRight(FormID, "navigate_view");
        navLoad.setFirstEnable(navigate);
        navLoad.setPreviousEnable(navigate);
        navLoad.setNextEnable(navigate);
        navLoad.setLastEnable(navigate);
        navLoad.setViewEnable(navigate);

        navLoad.setPrintEnable(getRight(FormID, "print"));
    }

    public static void setUserRightsToPanel(NavigationPanel navLoad, String FormID) {
        navLoad.setNewEnable(getRight(FormID, "adds"));
        navLoad.setEditEnable(getRight(FormID, "edit"));
        navLoad.setDeleteEnable(getRight(FormID, "deletes"));

        boolean navigate = getRight(FormID, "navigate_view");
        navLoad.setFirstEnable(navigate);
        navLoad.setPreviousEnable(navigate);
        navLoad.setNextEnable(navigate);
        navLoad.setLastEnable(navigate);
        navLoad.setViewEnable(navigate);

        navLoad.setPrintEnable(getRight(FormID, "print"));
    }

    public static void setUserRightsToPanel(NavigationPanel1 navLoad, String FormID) {
        navLoad.setNewEnable(getRight(FormID, "adds"));
        navLoad.setEditEnable(getRight(FormID, "edit"));
        navLoad.setDeleteEnable(getRight(FormID, "deletes"));

        boolean navigate = getRight(FormID, "navigate_view");
        navLoad.setFirstEnable(navigate);
        navLoad.setPreviousEnable(navigate);
        navLoad.setNextEnable(navigate);
        navLoad.setLastEnable(navigate);
        navLoad.setViewEnable(navigate);

        navLoad.setPrintEnable(getRight(FormID, "print"));
    }

    private void addUserMenu(TreeNode node) {
        try {
            PreparedStatement pst;
            ResultSet result;
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node;

            String query = "SELECT form_name FROM form_mst WHERE menu_cd IN "
                + "(SELECT menu_cd FROM menu_mst WHERE menu_name = '"+ node.toString() +"')";
            if (!DeskFrame.forms.isEmpty()) {
                query += " AND form_cd IN ("+ DeskFrame.forms +")";
            }
            pst = dataConnection.prepareStatement(query);
            result = pst.executeQuery();
            while (result.next()) {
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(result.getString(1), true);
                parent.add(child);
            }
            lb.closeResultSet(result);
            lb.closeStatement(pst);
        } catch (Exception ex) {
            lb.printToLogFile("Error at addUserMenu In User Rights", ex);
        }
    }

    private void addFormToUser(TreeNode node) {
        try {
            PreparedStatement pst;
            ResultSet result;
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node;
            pst = dataConnection.prepareStatement("SELECT menu_name FROM menu_mst", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            result = pst.executeQuery();

            while (result.next()) {
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(result.getString(1), true);
                parent.add(child);
                addUserMenu(child);
            }
            if (result != null) {
                result.close();
            }
            if (pst != null) {
                pst.close();
            }
        } catch (Exception ex) {
            lb.printToLogFile("Error at addFormToUser In User Rights", ex);
        }
    }

    private void jbtnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnApplyActionPerformed
        applyPrivileges();
    }//GEN-LAST:event_jbtnApplyActionPerformed

    private void jbtnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOkActionPerformed
        applyPrivileges();
        this.dispose();
    }//GEN-LAST:event_jbtnOkActionPerformed

    private void jbtnOkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnOkKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            jbtnOk.doClick();
        }
    }//GEN-LAST:event_jbtnOkKeyReleased

    private void jbtnApplyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnApplyKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            jbtnApply.doClick();
        }
    }//GEN-LAST:event_jbtnApplyKeyReleased

    private void jbtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPrintActionPerformed
        printVoucher();
    }//GEN-LAST:event_jbtnPrintActionPerformed

    private void jbtnPrintKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnPrintKeyReleased
        printVoucher();
    }//GEN-LAST:event_jbtnPrintKeyReleased

    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbtnCloseActionPerformed

    private void jbtnCloseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnCloseKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            this.dispose();
        }
    }//GEN-LAST:event_jbtnCloseKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton jbtnApply;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnOk;
    private javax.swing.JButton jbtnPrint;
    // End of variables declaration//GEN-END:variables
}