/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package utility;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import dhananistockmanagement.DeskFrame;
import support.Constants;
import support.Library;

/**
 *
 * @author @JD@
 */
public class BackUp extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private Library lb = new Library();
    String Syspath = System.getProperty("user.dir");

    /**
     * Creates new form BackUp
     */
    public BackUp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle(Constants.BACK_UP_FORM_NAME);
        initComponents();
        setIconToPanel();
        setPermission();
        // Close the dialog when Esc is pressed
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        this.setBounds(screenSize.width / 2 - this.getWidth() / 2, screenSize.height / 2 - this.getHeight() / 2, this.getWidth(), this.getHeight());
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    private void setPermission() {
        lb.setUserRightsToButton(jbtnBackUp, Constants.BACK_UP_FORM_ID, "EDIT");
    }

    private void setIconToPanel() {
        Syspath += File.separator + "Resources" + File.separator + "Images" + File.separator;
        jbtnBackUp.setIcon(new ImageIcon(Syspath +"backUp.png"));
        jbtnCancel.setIcon(new ImageIcon(Syspath +"close.png"));
    }

    private void backUpData() {
        try {
            String username = DeskFrame.username;
            String password = DeskFrame.password;
            String backUpSql = DeskFrame.backUpSql;
            String sqlBinPath = DeskFrame.sqlBinPath;
            String path = backUpSql +DeskFrame.dbName;

            File f = new File(backUpSql);
            if (!f.exists()) {
                if (f.mkdirs()) {
                    System.out.println("Multiple directories are created!");
                } else {
                    System.out.println("Failed to create multiple directories!");
                }
            }

            String executeCmd = sqlBinPath +"mysqldump -u "+ username 
                +" -p"+ password +" --add-drop-database -B "+ DeskFrame.dbName +" -r" + path;

            Process runtimeProcess;
            try {
                runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                int processComplete = runtimeProcess.waitFor();

                if (processComplete == 0) {
                    if(lb.sendEmailBackUp(path, DeskFrame.dbName)) {
                        JOptionPane.showMessageDialog(null, "Successfully take back up", Constants.BACK_UP_FORM_NAME, JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Problem in take back up", Constants.BACK_UP_FORM_NAME, JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Problem in take back up", Constants.BACK_UP_FORM_NAME, JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                lb.printToLogFile("Exception at take back up In Back up", ex);
            }
        } catch(Exception ex) {
            lb.printToLogFile("Exception at BackUpData In Back up", ex);
        }
    }
    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtnBackUp = new javax.swing.JButton();
        jbtnCancel = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(253, 243, 243));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 3, new java.awt.Color(235, 35, 35)), "Back Up", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 2, 16), new java.awt.Color(0, 0, 255))); // NOI18N

        jbtnBackUp.setBackground(new java.awt.Color(204, 255, 204));
        jbtnBackUp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnBackUp.setMnemonic('B');
        jbtnBackUp.setText("BACK UP");
        jbtnBackUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBackUpActionPerformed(evt);
            }
        });

        jbtnCancel.setBackground(new java.awt.Color(204, 255, 204));
        jbtnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbtnCancel.setMnemonic('C');
        jbtnCancel.setText("CLOSE");
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jbtnBackUp, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jbtnBackUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jbtnBackUp, jbtnCancel});

        getRootPane().setDefaultButton(jbtnBackUp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnBackUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBackUpActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_jbtnBackUpActionPerformed

    private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_jbtnCancelActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        if(retStatus == RET_OK) {
            backUpData();
        }
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnBackUp;
    private javax.swing.JButton jbtnCancel;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}